---
- name: Agregar permiso de internet temporal Palo Alto Lavi
  hosts: firewall_lavi
  gather_facts: false
  connection: local
   
  vars:
    ip_quito: "10.96.10.30"     # IP del firewall en Quito
    ip_lago: "172.30.1.235"      # IP del firewall en Lago
    ip_guayaquil: "10.64.0.143" # IP del firewall en Guayaquil

    
    #device:
      #ip_address: "{{ ip_address }}"
      #username: "{{ ansible_user }}"  # El nombre de usuario se toma de la credencial en AWX
      #password: "{{ ansible_password }}"  # La contraseña también se obtiene de la credencial en AWX
    
    # Variables para el firewall
    rule_name: "PERMISOS TEMPORALES" # Nombre de la regla a editar
    #action: "allow" # Acción de la regla (allow, deny)
    #source_zone: ["any"] # Zonas de origen
    #destination_zone: ["any"] # Zonas de destino
    #nueva_source_ip: ["10.96.144.10"]
    #destination_ip: ["any"]
    #application: ["any"]
    #service: ["service-http"]
    description: "Regla modificada por Ansible AWX"
   
  collections:
    - paloaltonetworks.panos
  
  tasks:
  
    - name: Definir la IP del firewall o Panorama según la ubicación seleccionada
      set_fact:
        device:
          ip_address: > 
            {% if ubicacion == 'Quito' %}
              {{ ip_quito }}
            {% elif ubicacion == 'Lago Agrio' %}
              {{ panorama_ip }}
            {% elif ubicacion == 'Guayaquil' %}
              {{ ip_guayaquil }}
            {% else %}
              ""
            {% endif %}
          username: "{{ ansible_user }}"  # El nombre de usuario se toma de la credencial en AWX
          password: "{{ ansible_password }}"  # La contraseña también se obtiene de la credencial en AWX
          # Indica si es un firewall individual o Panorama
          use_panorama: "{{ ubicacion == 'Lago Agrio' }}"

    - name: Validar que la IP del firewall o Panorama se haya asignado
      fail:
        msg: "La ubicación seleccionada '{{ ubicacion }}' no es válida o no tiene una IP asignada."
      when: device.ip_address == ""

    - name: Mostrar la IP y el tipo de configuración (Panorama o Firewall individual)
      debug:
        msg: "La IP para la ubicación '{{ ubicacion }}' es: {{ device.ip_address }}; uso de Panorama: {{ device.use_panorama }}"


    - name: Mostrar el valor de accion_ip
      debug:
        msg: "El valor de accion_ip es: {{ ip_address }}"
        
    - name: Convertir nueva_source_ip en lista si es texto
      set_fact:
        nueva_source_ip_list: "{{ nueva_source_ip | from_json }}"
      when: nueva_source_ip is string

      #SOLO PARA QUITO O GUAYAQUIL
    - name: Obtener la regla de seguridad actual (Quito / Gye)
      paloaltonetworks.panos.panos_security_rule:
        provider: "{{ device }}"
        rule_name: "{{ rule_name }}"
        vsys: "{{ vsys }}"
        state: gathered
      register: regla_existente
      when: not device.use_panorama  # Ejecuta sólo para Quito y Guayaquil
      ignore_errors: true  # Continúa la ejecución aunque no se encuentre la regla
      
      #failed_when: "'Object 'testawx1' not found' in (regla_existente.msg | default(''))"

      #SOLO PARA LAGO AGRIO
    - name: Obtener la regla de seguridad actual Panorama Lago
      paloaltonetworks.panos.panos_security_rule:
        provider: "{{ device }}"
        rule_name: "{{ rule_name }}"
        vsys: "{{ vsys }}"
        device_group: "SLG-RCOFWP-HA"
        state: gathered
      register: regla_existente
      when: device.use_panorama  # Ejecuta sólo para Lago
      ignore_errors: true  # Continúa la ejecución aunque no se encuentre la regla
      
           
    - name: Validar existencia de la regla
      fail:
        msg: "La regla de seguridad '{{ rule_name }}' no existe en el firewall."
      when: "regla_existente.gathered is not defined"
     
    #- name: Mostrar contenido completo de la regla existente obtenida para depuración
      #debug:
        #var: regla_existente
     
    - name: Verificar si la IP ya está en la lista de orígenes
      set_fact:
        ip_existe: "{{ nueva_source_ip_list[0] in (regla_existente.gathered['source_ip'] | default([])) }}"
        
    - name: Verificar si hay direcciones IP de origen configuradas
      set_fact:
        source_ips: "{{ regla_existente.gathered['source_ip'] | default([]) }}"
        
#    - name: Mostrar el nombre de las ips existentes:
 #     debug:
  #      msg: "IPs existentes: {{ regla_existente.object['source_ip'] | default([]) }}"

    - name: Mostrar los parámetros principales de la política de seguridad PERMISOS TEMPORALES
      debug:
        msg:
          - "Nombre de la regla: {{ regla_existente.gathered['rule_name'] | default('No especificado') }}"
          - "Descripción: {{ regla_existente.gathered['description'] | default('Sin descripción') }}"
          - "Acción: {{ regla_existente.gathered['action'] | default('No especificada') }}"
          - "De zona(s): {{ regla_existente.gathered['source_zone'] | default([]) | join(', ') }}"
          - "A zona(s): {{ regla_existente.gathered['destination_zone'] | default([]) | join(', ') }}"
          - "IPs de origen: {{ regla_existente.gathered['source_ip'] | default([]) | join(', ') }}"
          - "IPs de destino: {{ regla_existente.gathered['destination_ip'] | default([]) | join(', ') }}"
          - "Aplicaciones: {{ regla_existente.gathered['application'] | default([]) | join(', ') }}"
          - "Servicios: {{ regla_existente.gathered['service'] | default([]) | join(', ') }}"
          - "Usuarios: {{ regla_existente.gathered['source_user'] | default([]) | join(', ') }}"
          - "Estado: {{ regla_existente.gathered['disabled'] | default(false) | ternary('Deshabilitada', 'Habilitada') }}"

    - name: Mostrar el valor de accion_ip
      debug:
        msg: "El valor de accion_ip es: {{ accion_ip }}"
# SOLO PARA QUITO /GUAYAQUIL    
    - name: Agregar la nueva IP a la lista de direcciones de origen de la regla si no existe
      paloaltonetworks.panos.panos_security_rule:
        provider: "{{ device }}"
        rule_name: "{{ rule_name }}"
        source_ip: "{{ (regla_existente.gathered['source_ip'] | default([])) + nueva_source_ip_list }}"
        state: present
      when: 
        - accion_ip[0] == "agregar"
        - not ip_existe 
        - not device.use_panorama

        # SOLO PARA LAGO  
    - name: Agregar la nueva IP a la lista de direcciones de origen de la regla si no existe
      paloaltonetworks.panos.panos_security_rule:
        provider: "{{ device }}"
        rule_name: "{{ rule_name }}"
        device_group: "SLG-RCOFWP-HA"
        source_ip: "{{ (regla_existente.gathered['source_ip'] | default([])) + nueva_source_ip_list }}"
        state: present
      when: 
        - accion_ip[0] == "agregar"
        - not ip_existe 
        - device.use_panorama

    - name: Eliminar la IP de la lista de direcciones de origen de la regla si existe
      paloaltonetworks.panos.panos_security_rule:
        provider: "{{ device }}"
        rule_name: "{{ rule_name }}"
        source_ip: "{{ (regla_existente.gathered['source_ip'] | default([])) | difference(nueva_source_ip_list) }}"
        state: present
      when:
        - accion_ip[0] == "eliminar"
        - ip_existe
        
    - name: Obtener la regla de seguridad ACTUALIZADA
      paloaltonetworks.panos.panos_security_rule:
        provider: "{{ device }}"
        rule_name: "{{ rule_name }}"
        vsys: "{{ vsys }}"
        state: gathered
      register: regla_existente_ac
      ignore_errors: true  # Continúa la ejecución aunque no se encuentre la regla
    
    - name: Mostrar los parámetros principales de la política de seguridad PERMISOS TEMPORALES ACTUALIZADA
      debug:
        msg:
          - "Nombre de la regla: {{ regla_existente_ac.gathered['rule_name'] | default('No especificado') }}"
          - "Descripción: {{ regla_existente_ac.gathered['description'] | default('Sin descripción') }}"
          - "Acción: {{ regla_existente_ac.gathered['action'] | default('No especificada') }}"
          - "De zona(s): {{ regla_existente_ac.gathered['source_zone'] | default([]) | join(', ') }}"
          - "A zona(s): {{ regla_existente_ac.gathered['destination_zone'] | default([]) | join(', ') }}"
          - "IPs de origen: {{ regla_existente_ac.gathered['source_ip'] | default([]) | join(', ') }}"
          - "IPs de destino: {{ regla_existente_ac.gathered['destination_ip'] | default([]) | join(', ') }}"
          - "Aplicaciones: {{ regla_existente_ac.gathered['application'] | default([]) | join(', ') }}"
          - "Servicios: {{ regla_existente_ac.gathered['service'] | default([]) | join(', ') }}"
          - "Usuarios: {{ regla_existente_ac.gathered['source_user'] | default([]) | join(', ') }}"
          - "Estado: {{ regla_existente_ac.gathered['disabled'] | default(false) | ternary('Deshabilitada', 'Habilitada') }}"
